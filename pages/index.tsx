import Head from "next/head";
import {
  Box,
  Button,
  Center,
  FlatList,
  Heading,
  HStack,
  Input,
  Text,
  ChevronRightIcon,
  Spinner,
  Collapse,
  ScrollView,
  Link,
  CloseIcon,
  IconButton,
  Badge,
} from "native-base";
import { useState } from "react";

const checkIfPackageAvailableInData = (data: any, name: any) => {
  if (data) {
    for (let i = 0; i < data.length; i++) {
      if (data[i]?.package?.name === name) {
        return false;
      }
    }
  }
  return true;
};
const ResultItem = ({ item }: any) => {
  console.log(item, "ii");

  return (
    <Link href={item?.package?.links?.npm} isExternal>
      <Box
        px="6"
        py="2"
        bg="coolGray.100"
        shadow={2}
        w="100%"
        my="3"
        rounded="4"
      >
        <Box
          rounded="full"
          position="absolute"
          bottom="2"
          right="4"
          bg="coolGray.200"
          my="auto"
        >
          <ChevronRightIcon size="sm" />
        </Box>
        <HStack justifyContent="space-between" mb="2">
          <Text fontSize="lg" fontWeight="bold" color="coolGray.800">
            {item?.package?.name}
          </Text>
          <Badge>{`Version: ${item?.package?.version}`}</Badge>
        </HStack>
        <HStack space="2" flexWrap="wrap">
          {item?.package?.keywords?.map((keyword: any) => {
            return <Badge alignSelf="flex-start">{keyword}</Badge>;
          })}
        </HStack>
        <Text fontSize="xs" color="coolGray.600">
          {item?.package?.description}
        </Text>
        <Text mt="3" fontWeight="bold">
          {item?.package?.author?.name && (
            <Text fontWeight="normal" color="coolGray.600">
              Author:{" "}
            </Text>
          )}
          {item?.package?.author?.name}
        </Text>
        {!item?.package?.author?.name && (
          <Text mt="3" fontWeight="bold">
            {item?.package?.publisher?.username && (
              <Text fontWeight="normal" color="coolGray.600">
                Publisher:{" "}
              </Text>
            )}
            {item?.package?.publisher?.username}
          </Text>
        )}
      </Box>
    </Link>
  );
};

export default function Home(props: any) {
  const [packageName, setPackageName] = useState("");
  const [searchResults, setSearchResults] = useState();
  const [showResults, setShowResults] = useState(false);
  const [searchWasTriggered, setSearchWasTriggered] = useState(false);
  return (
    <>
      <Head>
        <title>Create Next App</title>
        <meta name="description" content="Generated by create next app" />
        <link rel="icon" href="/favicon.ico" />
      </Head>
      <Box display={{ base: "flex", md: "none" }}>
        <Center h="100vh">
          <Heading>Mobile website is coming soon.</Heading>
        </Center>
      </Box>
      <Box display={{ base: "none", md: "flex" }} alignItems="center" h="100vh">
        <Heading my={showResults ? "6" : "32"} size="2xl">
          Does my package already exists?
        </Heading>
        <Input
          onSubmitEditing={async () => {
            if (packageName) {
              // @ts-ignore
              setSearchResults(["searching"]);
              const data = await getPackage(packageName);
              setSearchResults(data.objects);
              setShowResults(false);
              setSearchWasTriggered(true);
            }
          }}
          color="coolGray.500"
          bg="coolGray.100"
          borderStyle={"dashed"}
          borderBottomWidth="3"
          variant="underlined"
          size="2xl"
          w="50%"
          placeholder="Type Your Package Name"
          onChangeText={(packageName: any) => {
            setPackageName(packageName);
          }}
          rightElement={
            <Button
              variant="unstyled"
              onPress={async () => {
                if (packageName) {
                  // @ts-ignore
                  setSearchResults(["searching"]);
                  const data = await getPackage(packageName);
                  setSearchResults(data.objects);
                  setShowResults(false);
                  setSearchWasTriggered(true);
                }
              }}
            >
              <ChevronRightIcon color="coolGray.500" />
            </Button>
          }
        />

        {/* @ts-ignore */}
        {searchResults?.length > 0 ? (
          <Text px="4" py="2" mt="4" bg="lightBlue.200:alpha.60" w="50%">
            {/* @ts-ignore */}
            {searchResults?.length > 0 &&
              //  @ts-ignore
              (searchResults[0] === "searching" ? (
                <HStack space="4" alignItems="center">
                  <Spinner color="indigo.600" />
                  <Text fontSize="lg" color="coolGray.600">
                    Searching...
                  </Text>
                </HStack>
              ) : checkIfPackageAvailableInData(searchResults, packageName) ? (
                "No package found with that name, you are good to go"
              ) : (
                "Sorry but there already exist a package exactly like that,"
              ))}
            {/* @ts-ignore */}
            {searchResults?.length >= 1 &&
              !showResults &&
              !(
                //  @ts-ignore
                (searchResults?.length > 0 && searchResults[0] === "searching")
              ) && (
                <Link onPress={() => setShowResults(true)}>
                  {checkIfPackageAvailableInData(searchResults, packageName)
                    ? "but we do recommend checking out these other packages that we found, available on npm having similar name to yours"
                    : " Show me the results"}
                </Link>
              )}
          </Text>
        ) : (
          packageName &&
          searchWasTriggered && (
            <Text px="4" py="2" mt="4" bg="lightBlue.200:alpha.60" w="50%">
              You are good to go buddy! ðŸ¥³
            </Text>
          )
        )}
        {/* @ts-ignore */}
        {showResults && searchResults?.length >= 1 && (
          <Box
            my="6"
            w="50%"
            flex="1"
            borderWidth="1"
            borderColor="coolGray.300"
            borderStyle="dashed"
            rounded="4"
            px="4"
            py="2"
          >
            {showResults && (
              <IconButton
                bg="coolGray.900"
                variant="unstyled"
                rounded="full"
                onPress={() => {
                  setShowResults(false);
                }}
                position="absolute"
                zIndex="1"
                right="-14"
                top="-16"
                _icon={{ size: "3" }}
                icon={<CloseIcon color="coolGray.50" />}
              />
            )}
            <ScrollView showsVerticalScrollIndicator={false}>
              <Box flex="1">
                <Collapse isOpen={showResults}>
                  <FlatList
                    // @ts-ignore
                    data={searchResults}
                    showsVerticalScrollIndicator={false}
                    renderItem={({ item }: any) => {
                      return <ResultItem item={item} />;
                    }}
                    keyExtractor={(item: any) => item?.package?.name}
                  />
                </Collapse>
              </Box>
            </ScrollView>
          </Box>
        )}
      </Box>
    </>
  );
}

async function getPackage(name: any) {
  const response = await fetch(
    "https://registry.npmjs.com/-/v1/search?text=" + name + "&size=20"
  );
  return response.json();
}
